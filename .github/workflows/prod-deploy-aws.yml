name: Prod Deploy to AWS

#########################################################################################
##  WORKFLOW TRIGGER
#########################################################################################
on:
  # Workflow will run when a pull request is closed.
  pull_request:
    types: [ closed ]

#########################################################################################
##  PERMISSIONS
#########################################################################################
# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write   # this is required for requesting the JWT
  contents: read    # This is required for actions/checkout

#########################################################################################
##  WORKFLOW JOBS
#########################################################################################
jobs:
  build:
    # This job will only run if the PR has been merged.
    if: github.event.pull_request.merged == true
    name: Build Portfolio Site
    runs-on: ubuntu-latest
    # Creates output variable to be used in steps or other jobs.
    outputs:
      PACKAGE_VERSION: ${{ steps.version.outputs.PACKAGE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build:prod

      - name: Get version number
        id: version
        run: |
          packageVersion="v$(npm pkg get version | sed 's/"//g')"
          echo "package version: $packageVersion"
          echo "PACKAGE_VERSION=$packageVersion" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/eslutz.github.io

  deploy_to_aws:
    name: Deploy to Amazon S3 and create release
    # This job will not run until build job finishes successfully.
    needs: build
    runs-on: ubuntu-latest
    # Get secrets and deploy to the prod-ericslutz.dev environment.
    environment:
      name: prod-ericslutz.dev
      url: ${{ vars.PROD_URL }}
    env:
      RELEASE_VERSION: ${{ needs.build.outputs.PACKAGE_VERSION }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-duration-seconds: 900 # the ttl of the session, in seconds.
          aws-region: ${{ vars.AWS_REGION }} # use your region here.

      - name: Deploy
        if: success()
        run: aws s3 sync ./ s3://ericslutz.dev

      - name: Create Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_API_TOKEN }}
          script: |
            const {RELEASE_VERSION} = process.env

            try {
              const response = github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `${RELEASE_VERSION}`,
                target_commitish: context.sha,
                name: `Release ${RELEASE_VERSION}`,
                draft: false,
                prerelease: false,
                generate_release_notes: true,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
