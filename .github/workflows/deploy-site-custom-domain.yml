#########################################################################################
##  SET CUSTOM DOMAIN
#########################################################################################
name: Deploy Portfolio Site Custom Domain

#########################################################################################
##  WORKFLOW TRIGGER
#########################################################################################
on:
  # Manual trigger only - custom domain changes should be intentional
  workflow_dispatch:

#########################################################################################
##  WORKFLOW CONCURRENCY
#########################################################################################
# Prevents multiple parallel runs of the workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

#########################################################################################
##  WORKFLOW JOBS
#########################################################################################
jobs:
  # Sets a custom domain for the portfolio site
  set_custom_domain:
    runs-on: ubuntu-latest
    env:
      STATIC_WEB_APP_NAME: ${{ vars.APP_NAME }}-swa
      RESOURCE_GROUP_NAME: ${{ vars.APP_NAME }}-resource-group
    name: Set Custom Domain Job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate custom domain
        run: |
          ROOT_DOMAIN="${{ vars.CUSTOM_ROOT_DOMAIN }}"

          # Validate required variables
          if [ -z "$ROOT_DOMAIN" ]; then
            echo "::error::CUSTOM_ROOT_DOMAIN is not set. Please set it as a repository variable."
            exit 1
          fi

          # Validate CUSTOM_ROOT_DOMAIN is an apex domain
          IFS='.' read -ra DOMAIN_PARTS <<< "$ROOT_DOMAIN"
          if [ ${#DOMAIN_PARTS[@]} -ne 2 ]; then
            echo "::error::CUSTOM_ROOT_DOMAIN must be an apex domain (e.g., example.com)"
            exit 1
          fi

          echo "Validation passed: CUSTOM_ROOT_DOMAIN is set to $ROOT_DOMAIN"

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Get the Static Web App's default hostname
      - name: Get static web app hostname
        id: get-hostname
        run: |
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP_NAME }}"
          SWA_NAME="${{ env.STATIC_WEB_APP_NAME }}"

          HOSTNAME=$(az staticwebapp show \
            --name "$SWA_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "defaultHostname" -o tsv)

          echo "defaultHostname=$HOSTNAME" >> $GITHUB_OUTPUT

      # Deploy the Bicep template to create the CNAME and TXT validation records
      # Using az cli instead of the Azure/arm-deploy action because the action doesn't support the --no-wait flag
      # The --no-wait flag is required to avoid blocking the workflow until the deployment is complete
      - name: Deploy Bicep template
        id: deploy-bicep
        run: |
          ROOT_DOMAIN="${{ vars.CUSTOM_ROOT_DOMAIN }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP_NAME }}"
          SWA_NAME="${{ env.STATIC_WEB_APP_NAME }}"

          az deployment group create \
            --resource-group "$RESOURCE_GROUP" \
            --template-file ./iac/swacustomdomain.bicep \
            --parameters staticWebAppName="$SWA_NAME" rootDomain="$ROOT_DOMAIN" \
            --no-wait

      # Wait for Azure to add the custom domains to the Static Web App
      - name: Wait for Azure to register domains
        run: |
          echo "Waiting 30 seconds for domain registration..."
          sleep 30

      # Retrieve the domain validation tokens with the az cli
      - name: Fetch domain validation tokens
        id: get-validation-tokens
        run: |
          ROOT_DOMAIN="${{ vars.CUSTOM_ROOT_DOMAIN }}"
          RESOURCE_GROUP="${{ env.RESOURCE_GROUP_NAME }}"
          SWA_NAME="${{ env.STATIC_WEB_APP_NAME }}"

          # Get root domain token
          ROOT_TOKEN=$(az staticwebapp hostname list \
            --name "$SWA_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?name=='$ROOT_DOMAIN'].validationToken" -o tsv)

          # Get www subdomain token
          WWW_TOKEN=$(az staticwebapp hostname list \
            --name "$SWA_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "[?name=='www.$ROOT_DOMAIN'].validationToken" -o tsv)

          if [ -z "$ROOT_TOKEN" ] || [ -z "$WWW_TOKEN" ]; then
            echo "::error::Failed to retrieve validation tokens. Ensure domain binding is correctly set up."
            exit 1
          fi

          echo "ROOT_TOKEN=$ROOT_TOKEN" >> $GITHUB_OUTPUT
          echo "WWW_TOKEN=$WWW_TOKEN" >> $GITHUB_OUTPUT

      # Get the Cloudflare Zone ID for the specified domain
      - name: Get Cloudflare Zone ID
        id: get-zone-id
        run: |
          ROOT_DOMAIN="${{ vars.CUSTOM_ROOT_DOMAIN }}"
          CF_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"

          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$ROOT_DOMAIN" \
            -H "Authorization: Bearer $CF_TOKEN" \
            -H "Content-Type: application/json" | \
            jq -r '.result[0].id')

          if [ -z "$ZONE_ID" ] || [ "$ZONE_ID" = "null" ]; then
            echo "::error::Failed to get Cloudflare Zone ID for domain $ROOT_DOMAIN"
            exit 1
          fi

          echo "ZONE_ID=$ZONE_ID" >> $GITHUB_OUTPUT

      # Create CNAME and TXT validation records in Cloudflare
      - name: Create DNS Records in Cloudflare
        run: |
          # Source the script to make the function available
          source .github/scripts/manage_dns_records.sh

          # Set variables
          ROOT_DOMAIN="${{ vars.CUSTOM_ROOT_DOMAIN }}"
          HOSTNAME="${{ steps.get-hostname.outputs.defaultHostname }}"
          ROOT_TOKEN="${{ steps.get-validation-tokens.outputs.ROOT_TOKEN }}"
          WWW_TOKEN="${{ steps.get-validation-tokens.outputs.WWW_TOKEN }}"
          CF_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          ZONE_ID="${{ steps.get-zone-id.outputs.ZONE_ID }}"

          echo "Managing DNS records for $ROOT_DOMAIN..."
          echo "----------------------------------------"

          # Track if any operations failed
          FAILED=0

          # Create CNAME records for both domains
          manage_dns_record --type "CNAME" --name "$ROOT_DOMAIN" --content "$HOSTNAME" --proxied "true" --cf-token "$CF_TOKEN" --zone-id "$ZONE_ID" || FAILED=1
          manage_dns_record --type "CNAME" --name "www.$ROOT_DOMAIN" --content "$HOSTNAME" --proxied "true" --cf-token "$CF_TOKEN" --zone-id "$ZONE_ID" || FAILED=1

          # Create TXT validation records for both domains
          manage_dns_record --type "TXT" --name "$ROOT_DOMAIN" --content "$ROOT_TOKEN" --proxied "false" --cf-token "$CF_TOKEN" --zone-id "$ZONE_ID" || FAILED=1
          manage_dns_record --type "TXT" --name "www.$ROOT_DOMAIN" --content "$WWW_TOKEN" --proxied "false" --cf-token "$CF_TOKEN" --zone-id "$ZONE_ID" || FAILED=1

          echo "----------------------------------------"
          if [ $FAILED -eq 1 ]; then
            echo "::error::DNS record management completed with errors"
            exit 1
          else
            echo "DNS record management completed successfully"
          fi

      - name: Verification message
        run: |
          ROOT_DOMAIN="${{ steps.deploy-bicep.outputs.rootDomainName }}"
          WWW_DOMAIN="${{ steps.deploy-bicep.outputs.wwwDomainName }}"

          echo "Custom domain setup completed!"
          echo "Created/Updated DNS records in Cloudflare for domains:"
          echo "  - $ROOT_DOMAIN"
          echo "  - $WWW_DOMAIN"
          echo "Please allow some time for DNS propagation and Azure validation."
