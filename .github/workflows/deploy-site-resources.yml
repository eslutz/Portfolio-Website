#########################################################################################
##  DEPLOY INFRASTRUCTURE
#########################################################################################
name: Deploy Portfolio Site Infrastructure

#########################################################################################
##  WORKFLOW TRIGGER
#########################################################################################
on:
  # Manual trigger for on-demand infrastructure deployment
  workflow_dispatch:
    inputs:
      backup_database_name:
        description: 'Name of CosmosDB database to restore from backup (optional)'
        required: false
        type: string
      backup_container_name:
        description: 'Name of CosmosDB database container to restore from backup (optional)'
        required: false
        type: string
  # Automatic trigger on push to main branch for IAC changes
  push:
    branches:
      - main
    paths:
      - 'iac/**'
  # Automatic trigger on pull request events for IAC changes to main branch
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
    paths:
      - 'iac/**'

#########################################################################################
##  WORKFLOW CONCURRENCY
#########################################################################################
# Prevents multiple parallel runs of the workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

#########################################################################################
##  WORKFLOW JOBS
#########################################################################################
jobs:
  # Deploys the Bicep template to create/update Azure resources
  # Outputs the Static Web App name, resource group, and Cosmos DB name for use in subsequent jobs
  deploy_infrastructure:
    runs-on: ubuntu-latest
    outputs:
      staticWebAppName: ${{ steps.deploy-bicep.outputs.staticWebAppName }}
      resourceGroupName: ${{ steps.deploy-bicep.outputs.resourceGroupName }}
      databaseName: ${{ steps.deploy-bicep.outputs.databaseName }}
      containerName: ${{ steps.deploy-bicep.outputs.containerName }}
    name: Deploy Infrastructure Job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep template
        id: deploy-bicep
        uses: azure/arm-deploy@v2
        with:
          scope: 'subscription'
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          region: ${{ vars.AZURE_REGION }}
          template: ./iac/main.bicep
          parameters: >-
            location=${{ vars.AZURE_REGION }}
            appName=${{ vars.APP_NAME }}
            repoUrl=${{ github.server_url }}/${{ github.repository }}
            repoBranch=${{ github.ref_name }}
            existingCosmosDbAccountName=${{ vars.COSMOS_ACCOUNT_NAME }}
            existingCosmosDbResourceGroup=${{ vars.COSMOS_RESOURCE_GROUP }}

  # Restores the Cosmos DB database from its latest backup
  # Uses the database name from the infrastructure deployment
  database_restore:
    needs: deploy_infrastructure
    runs-on: ubuntu-latest
    name: Restore CosmosDB Database Job
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Restore CosmosDB Database
        run: |
          DESTINATION_DB_NAME="${{ needs.deploy_infrastructure.outputs.databaseName }}"
          SOURCE_DB_NAME="${{ github.event.inputs.backup_database_name || needs.deploy_infrastructure.outputs.databaseName }}"
          BACKUP_CONTAINER_NAME="${{ github.event.inputs.backup_container_name || needs.deploy_infrastructure.outputs.containerName }}"
          echo "Restoring from backup database: $SOURCE_DB_NAME"
          echo "Restoring container: $BACKUP_CONTAINER_NAME"
          echo "Restoring to database: $DESTINATION_DB_NAME"

          .github/scripts/restore_cosmos_db.sh \
            --account-name "${{ vars.COSMOS_ACCOUNT_NAME }}" \
            --resource-group "${{ vars.COSMOS_RESOURCE_GROUP }}" \
            --source-database "$SOURCE_DB_NAME" \
            --container "$BACKUP_CONTAINER_NAME" \
            --destination-database "$DESTINATION_DB_NAME" \
            --location "${{ vars.AZURE_REGION }}"

  # Retrieves the Static Web App code deployment token and saves it as a repository secret
  save_swa_token:
    needs: deploy_infrastructure
    runs-on: ubuntu-latest
    name: Save SWA Code Deployment Token Job
    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get SWA deployment token
        id: get-swa-token
        run: |
          SWA_NAME="${{ needs.deploy_infrastructure.outputs.staticWebAppName }}"
          SWA_RESOURCE_GROUP="${{ needs.deploy_infrastructure.outputs.resourceGroupName }}"

          TOKEN=$(az staticwebapp secrets list \
            --name "$SWA_NAME" \
            --resource-group "$SWA_RESOURCE_GROUP" \
            --query "properties.apiKey" -o tsv)
          echo "::add-mask::$TOKEN"
          echo "swa_token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Add SWA token as repository secret
        env:
          GH_TOKEN: ${{ secrets.REPO_SECRETS_TOKEN }}
          SWA_TOKEN: ${{ steps.get-swa-token.outputs.swa_token }}
        run: |
          gh secret set SWA_DEPLOYMENT_TOKEN --body "$SWA_TOKEN" --repo "${{ github.repository }}"

  # Triggers the site deployment workflow with the deployment token
  deploy_portfolio:
    needs: save_swa_token
    uses: ./.github/workflows/deploy-site.yml
    secrets:
      SWA_DEPLOYMENT_TOKEN: ${{ secrets.SWA_DEPLOYMENT_TOKEN }}
    name: Deploy Portfolio Site Job
